{"version":3,"file":"static/js/884.258c3a97.chunk.js","mappings":"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","sources":["pages/MovieDetails.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, Link, Outlet } from 'react-router-dom';\nimport css from './movies.module.css';\nimport PropTypes from 'prop-types'; \n\nfunction MovieDetails() {\n  const [movieDetails, setMovieDetails] = useState(null);\n  //useParams() umożliwia dostęp do parametrów przekazywanych do ścieżki URL w aplikacji\n  //movieId jest parametrem pobieranym z aktualnego adresu URL. Np. jeśli mam ścieżkę \"/movies/123\", gdzie \"123\" to id filmu, movieId będzie miało wartość \"123\"\n  const { movieId } = useParams();\n\n  //https://developer.themoviedb.org/reference/movie-details - stąd wzięłam URL API\n  // za każdym razem, gdy wartość movieId zostanie zaktualizowana (tablica zależności [movieId]) np. gdy użytkownik przejdzie do nowego filmu w aplikacji - zostanie pobrany nowy zestaw szczegółów filmu\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=55b41f82a3d9f463669460bf70677f68`\n        );\n        const data = await response.json();\n        setMovieDetails(data);\n      } catch (error) {\n        console.error('Error fetching movie details', error);\n      }\n    };\n\n    fetchMovieDetails();\n    //Linijka fetchMovieDetails() jest tu potrzebna, bo chcę, żeby od razu po załadowaniu  komponentu zostały pobrane szczegóły filmu i wyświetlone. Bez tej linijki, funkcja fetchMovieDetails nie zostanie wykonana automatycznie po pierwszym razie. To samo będzie działo się za każdym razem, kiedy movieId się zmieni - wywołuje funkcję fetchMovieDetails, żebym mogła mieć aktualne informacje o filmie\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className={css['movie-details-container']}>\n      <div className={css['movie-details']}>\n        <img\n          src={`https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`}\n          alt={movieDetails.title}\n          className={css['movie-poster']}\n        />\n        <div>\n          <h2 className={css['page-header']}>{movieDetails.title}</h2>\n          <p>{movieDetails.overview}</p>\n          <p>Rating: {movieDetails.vote_average}</p>\n          <p>\n            Genres: {movieDetails.genres.map(genre => genre.name).join(', ')}\n          </p>\n          <nav className={css['additional-info']}>\n            <h3 className={css['page-header']}>Additional information</h3>\n            <ul>\n              <li>\n                <Link to={`cast`}>Cast</Link>\n              </li>\n              <li>\n                <Link to={`reviews`}>Reviews</Link>\n              </li>\n            </ul>\n          </nav>{' '}\n        </div>\n      </div>\n      <Outlet />\n    </div>\n  );\n}\n\nMovieDetails.propTypes = {\n    movieId: PropTypes.string.isRequired,\n  };\n\nexport default MovieDetails;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["_useState","useState","_useState2","_slicedToArray","movieDetails","setMovieDetails","movieId","useParams","useEffect","fetchMovieDetails","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","data","_context","prev","next","fetch","concat","sent","json","t0","console","error","stop","apply","arguments","_jsxs","className","css","children","_jsx","src","poster_path","alt","title","overview","vote_average","genres","map","genre","name","join","Link","to","Outlet","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","fn","self","this","args","err","undefined"],"sourceRoot":""}